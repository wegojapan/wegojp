// Media Queries
@charset "utf-8";

$bp_tab: 1199px; //tab
$bp_sp: 767px; //sp
$columnWidth: 1400;
// Font Set
$baseSize: 16;
// Color Set
$baseColor: #000;
$pointColor: #0D366C;


@mixin mq($device, $val: null, $val2: null) {
	@if $device == pc {
		//pc
		@media only screen and (min-width: $bp_tab + 1) {
			@content;
		}
		@media print {
			@content;
		}
	} @else if $device == pc_s {
		//pc_s
		@media only screen and (min-width: $bp_tab + 1) and (max-width: ($bp_tab + 1) + (1920 - ($bp_tab + 1)) / 2) {
			@content;
		}
	} @else if $device == pc_l {
		//pc_l
		@media only screen and (min-width: ($bp_tab + 1) + (1920 - ($bp_tab + 1)) / 2 + 1) {
			@content;
		}
		@media print {
			@content;
		}
	} @else if $device == tab {
		//tab
		@media only screen and (min-width: $bp_sp + 1) and (max-width: $bp_tab) {
			@content;
		}
	} @else if $device == tab_l {
		//tab_l
		@media only screen and (min-width: ($bp_tab - $bp_sp) / 2 + $bp_sp + 1) and (max-width: $bp_tab) {
			@content;
		}
	} @else if $device == tab_s {
		//tab_s
		@media only screen and (min-width: $bp_sp + 1) and (max-width: ($bp_tab - $bp_sp) / 2 + $bp_sp) {
			@content;
		}
	} @else if $device == sp {
		//sp
		@media only screen and (max-width: $bp_sp) {
			@content;
		}
	} @else if $device == sp_l {
		//sp_l
		@media only screen and (min-width: ($bp_sp - 320) / 2 + 320 + 1) and (max-width: $bp_sp) {
			@content;
		}
	} @else if $device == sp_s {
		//sp_s
		@media only screen and (max-width: ($bp_sp - 320) / 2 + 320) {
			@content;
		}
	} @else if $device == pc_tab {
		//pc & tab
		@media only screen and (min-width: $bp_sp + 1) {
			@content;
		}
	} @else if $device == tab_sp {
		//tab & sp
		@media only screen and (max-width: $bp_tab) {
			@content;
		}
	} @else if $device == min_w {
		//max-width
		@media only screen and (min-width: $val) {
			@content;
		}
	} @else if $device == max_w {
		//min-width
		@media only screen and (max-width: $val) {
			@content;
		}
	} @else if $device == min_max_w {
		//min-width ~ max-width
		@media only screen and (min-width: $val) and (max-width: $val2) {
			@content;
		}
	} @else if $device == min_h {
		//max-height
		@media only screen and (min-height: $val) {
			@content;
		}
	} @else if $device == max_h {
		//min-height
		@media only screen and (max-height: $val) {
			@content;
		}
	} @else if $device == min_max_h {
		//min-height ~ max-height
		@media only screen and (min-height: $val) and (max-height: $val2) {
			@content;
		}
	}
}


@function wCon($width, $parentWidth: $columnWidth) {
	@return $width / $parentWidth * 100%;
}


// Base Width Set
%bw {
	width: 90%;
	max-width: $columnWidth + px;
	margin: auto;
	@include mq(tab_sp) {
		width: 880 / 960 * 100%;
	}
}
%bw_l {
	width: 90%;
	margin: auto;
	@include mq(pc) {
		padding: 0 50px;
	}
	@include mq(tab_sp) {
		width: 880 / 960 * 100%;
	}
}

// ClearFix
%cf {
	&:after {
		content: "";
		display: table;
		clear: both;
	}
}


@mixin fsz($size: $baseSize, $parent: null) {
	$i: $size * (100 / $baseSize);

	@if $parent == null {
		font-size: ceil($i * 1%);
	} @else {
		font-size: ceil(100% * ($size / $parent));
	}
}
@mixin fsz-cha($pc_fsz: 30, $tab_fsz: 30, $sp_fsz: 17) {
	@include fsz($pc_fsz);
	@include mq(tab) {
		@include fsz($tab_fsz);
	}
	@include mq(sp) {
		@include fsz($sp_fsz);
	}
}

@mixin font($type: "jp") {
	@if $type == "jp" {
		font-family: 'Noto Sans jp', sans-serif;
	} @else if $type == "en" {
		font-family: 'Open Sans', sans-serif;
	}
}




@mixin cV($pro, $v1: 0, $v2: 0, $v3: null) {
	#{$pro}: $v1;
	@if $v3 == null {
		@include mq(sp) {
			#{$pro}: $v2;
		}
	} @else {
		@include mq(tab) {
			#{$pro}: $v2;
		}
		@include mq(sp) {
			#{$pro}: $v3;
		}
	}
}


@mixin tit {
    @extend %bw;
    @include cV(margin-bottom, 60px, 5%);
    text-align: center;
    strong, small {display: block;}
    strong {
        @include fsz-cha(55,55,38);
    }
    small {
        @include fsz-cha(18,18,16);
        font-weight: normal;
    }
}

@mixin st {
    text-align: center;
    span, strong {
        display: block;
        color: $pointColor;
    }
    span {
        @include fsz-cha(22, 18, 16);
        font-weight: normal;
    }
    strong {
        @include fsz-cha(36, 30, 25);
    }
    &:before {
        content: "";
        display: block;
        margin: 0 auto 30px;
        width: 50px;
        height: 4px;
        background-color: $pointColor;
    }
}

@mixin sub_top_tit {
    position: relative;
    backround-color: #f9f9f9;
    .box_tit {
        @extend %bw;
        @include cV(height, calc(40vh - 100px), calc(40vh - 75px), 30vh);
        box-sizing: border-box;
        position: relative;
        .tit {
            text-align: left;
            position: absolute;
            left: 0;
            @include cV(bottom, 0, 10%);
            small {font-weight: 300;}
        }
        .nav {
            position: absolute;
            right: 0;
            bottom: 60px;
            display: flex;
            align-items: center;
            li {
                @include fsz-cha(13,13,12);
                a {
                    display: inline-flex;
                    align-items: center;
                    color: #858585;
                    i {
                        height: 13px;
                        margin-right: 7px;
                    }
                    &:hover {
                        text-decoration: underline;
                    }
                }
                &:before {
                    content: ">";
                    padding: 0 0.5em;
                }
                &:first-child {
                    &:before {
                        display: none;
                    }
                }
            }
        }
    }
    .box_visual {
        position: absolute;
        left: 0;
        bottom: 0;
        width: 100%;
        @include cV(height, 60vh, 60vh, 60vh);
        background-size: cover;
    }
    @include mq(sp) {
        .box_tit {
            .tit {
                font-weight: 600;
            }
        }
    }
    &.type_visual {
        @include cV(height, 
            calc(100vh - 100px),
            calc(100vh - 75px),
            calc(100vh - 55px)
        );    
    }
    &.type_tit {
        @include cV(height, 
            calc(40vh - 100px),
            calc(40vh - 75px),
            30vh
        );    
    }
}



